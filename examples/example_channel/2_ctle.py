"""
This file shows example of CTLE modelling, and generates the impulse response of the channel and CTLE

Requires running 1_channel.py first
"""

#import useful packages
import serdespy as sdp
import numpy as np
import matplotlib.pyplot as plt
import skrf as rf
import scipy as sp

#load in data generated by 1_channel.py
f = np.load("./data/f.npy")
h = np.load("./data/h_thru.npy")
H = np.load("./data/TF_thru.npy")

#frequency vector in rad/s
w = f*(2*np.pi)

#oversampling ratio used in 1_channel.py
samples_per_symbol = 64

#set poles and zeroes for peaking at nyquist freq
#high peaking because channel is high insertion loss
z = 2e10
p = 1.7e11
k = p**2/z

#calculate Frequency response of CTLE at given frequencies
w, H_ctle = sp.signal.freqs([k/p**2, k*z/p**2], [1/p**2, 2/p, 1], w)

#bode plot of CTLE transfer function
plt.figure(dpi=200)
plt.semilogx(1e-9*f,20*np.log10(abs(H_ctle)), color = "red", label = 'CTLE')
plt.title("CTLE Frequency Response")
plt.grid()
plt.axvline(x=25,color = 'grey', label = "Nyquist Frequency")
plt.axvline(x=z/(2*np.pi)*1e-9,color = 'green', label = "Zero Location")
plt.axvline(x=p/(2*np.pi)*1e-9,color = 'blue', label = "Pole Location")
plt.legend()


#%% compute and save impulse response of CTLE transfer function
h_ctle, t_ctle = sdp.freq2impulse(H_ctle,f)
h_ctle = h_ctle[0:200]
plt.figure(dpi=200)
plt.plot(h_ctle)

np.save("./data/h_ctle.npy", h_ctle)

#%% plot eye diagram with and without CTLE
voltage_levels = np.array([-3,-1,1,3])

nyquist_f = 26.56e9

data = sdp.prqs10(1)

TX = sdp.Transmitter(data[:10000], voltage_levels, nyquist_f)

TX.oversample(samples_per_symbol)

signal_out = sp.signal.fftconvolve(TX.signal_ideal, h, mode = "same")[:64*1000*5]

sdp.simple_eye(signal_out[1000:], samples_per_symbol*3, 1000, TX.UI/TX.samples_per_symbol, "Eye Diagram")

signal_out_ctle = sp.signal.fftconvolve(signal_out, h_ctle, mode = "same")

sdp.simple_eye(signal_out_ctle[1000:], samples_per_symbol*3, 1000, TX.UI/TX.samples_per_symbol, "Eye Diagram with CTLE")

plt.show()